name: Auto Release

on:
  push:
    branches:
      - main

jobs:
  check-and-release:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    outputs:
      should_release: ${{ steps.check_tag.outputs.should_release }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get current version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "current=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.current }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version.outputs.current }}" -m "Release v${{ steps.version.outputs.current }}"
          git push origin "v${{ steps.version.outputs.current }}"

  build-release:
    needs: check-and-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
    runs-on: ${{ matrix.platform }}
    if: needs.check-and-release.outputs.should_release == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add x86_64-apple-darwin target
        if: matrix.platform == 'macos-latest'
        run: rustup target add x86_64-apple-darwin

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Get version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build the app
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        run: npm run tauri build -- ${{ matrix.args }}

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/deb/*.deb.sig
            src-tauri/target/release/bundle/rpm/*.rpm.sig

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi.sig
            src-tauri/target/release/bundle/nsis/*.exe.sig

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg.sig
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app.tar.gz
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app.tar.gz.sig

  publish-release:
    needs: build-release
    permissions:
      contents: write
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "=== Downloaded artifacts structure ==="
          ls -R artifacts/

      - name: Generate latest.json for updater
        run: |
          # Create latest.json with proper structure
          cat > latest.json << EOF
          {
            "version": "v${{ steps.version.outputs.version }}",
            "notes": "Release v${{ steps.version.outputs.version }}",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "linux-x86_64": {
                "signature": "$(cat artifacts/linux-artifacts/*.deb.sig 2>/dev/null || echo '')",
                "url": "https://github.com/TISEPSE/Nexus/releases/download/v${{ steps.version.outputs.version }}/$(cd artifacts/linux-artifacts && ls *.deb 2>/dev/null | head -1)"
              },
              "windows-x86_64": {
                "signature": "$(cat artifacts/windows-artifacts/*.msi.sig 2>/dev/null || echo '')",
                "url": "https://github.com/TISEPSE/Nexus/releases/download/v${{ steps.version.outputs.version }}/$(cd artifacts/windows-artifacts && ls *.msi 2>/dev/null | head -1)"
              },
              "darwin-x86_64": {
                "signature": "$(cat artifacts/macos-artifacts/*.app.tar.gz.sig 2>/dev/null || echo '')",
                "url": "https://github.com/TISEPSE/Nexus/releases/download/v${{ steps.version.outputs.version }}/$(cd artifacts/macos-artifacts && ls *.app.tar.gz 2>/dev/null | head -1)"
              },
              "darwin-aarch64": {
                "signature": "$(cat artifacts/macos-artifacts/*.app.tar.gz.sig 2>/dev/null || echo '')",
                "url": "https://github.com/TISEPSE/Nexus/releases/download/v${{ steps.version.outputs.version }}/$(cd artifacts/macos-artifacts && ls *.app.tar.gz 2>/dev/null | head -1)"
              }
            }
          }
          EOF
          cat latest.json

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          files: |
            artifacts/**/*
            latest.json
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
